#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the circular linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->next = NULL; // Will be updated later
    return newNode;
}

// Function to insert a node at the beginning of the circular linked list
struct Node* insertAtBeginning(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (!head) {
        newNode->next = newNode; // Point to itself for a single node circular list
        return newNode;
    }
    struct Node* temp = head;
    while (temp->next != head) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->next = head;
    return newNode; // New node becomes the head
}

// Function to insert a node at the end of the circular linked list
struct Node* insertAtEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (!head) {
        newNode->next = newNode; // Point to itself for a single node circular list
        return newNode;
    }
    struct Node* temp = head;
    while (temp->next != head) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->next = head;
    return head;
}

// Function to insert a node after a given node in the circular linked list
void insertAfter(struct Node* prevNode, int data) {
    if (!prevNode) {
        printf("Previous node cannot be NULL.\n");
        return;
    }
    struct Node* newNode = createNode(data);
    newNode->next = prevNode->next;
    prevNode->next = newNode;
}

// Function to display the circular linked list
void displayList(struct Node* head) {
    if (!head) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = head;
    printf("Circular Linked List: ");
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf(" (Head)\n");
}

int main() {
    struct Node* head = NULL;

    // Insert at the beginning
    head = insertAtBeginning(head, 50);
    displayList(head); // Output: Circular Linked List: 50 ->  (Head)

    head = insertAtBeginning(head, 40);
    displayList(head); // Output: Circular Linked List: 40 -> 50 ->  (Head)

    head = insertAtBeginning(head, 30);
    displayList(head); // Output: Circular Linked List: 30 -> 40 -> 50 ->  (Head)

    // Insert at the end
    head = insertAtEnd(head, 60);
    displayList(head); // Output: Circular Linked List: 30 -> 40 -> 50 -> 60 ->  (Head)

    head = insertAtEnd(head, 70);
    displayList(head); // Output: Circular Linked List: 30 -> 40 -> 50 -> 60 -> 70 ->  (Head)

    // Insert after a specific node (e.g., after the node with data 40)
    struct Node* temp = head->next; // Point to the node with data 40
    insertAfter(temp, 45);
    displayList(head); // Output: Circular Linked List: 30 -> 40 -> 45 -> 50 -> 60 -> 70 ->  (Head)

    return 0;
}
